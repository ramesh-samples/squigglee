- hosts: tag_ring_position_{{logicalNumber}}:&tag_cluster_{{cluster}}
  user: ec2-user 
  vars:
    ec2_access_key: "AKIAIQWKLMSGKA7YCSLA"
    ec2_secret_key: "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"
    cluster: "TSR_EC2_CLUST"
    dataVolName: "/data"
    logVolName: "/log"
#    zk_version: "zookeeper-3.4.6"
    zk_version: "zookeeper-3.5.0-alpha"
#    seeds: '{{groups["tag_is_seed_yes"] | join(",")}}'
#    seedZkServers: "{{ lookup('file', './seedZkServers.yml') }}"
    security_group: '{{hostvars[inventory_hostname]["ec2_security_group_names"]}}'
  tasks:
    - debug: msg="Configuring Zookeeper at Logical Node = {{logicalNumber}}"  
#    - debug: var=logicalNumber
    - action: shell expr {{hostvars[inventory_hostname]['ec2_tag_ring_position']}} \+ 1
      register: zkmyid
    - stat: path="/opt/zkoverlay/{{ zk_version }}" 
      register: zkpath 
      sudo: yes      
    - copy: src="./{{ zk_version }}.tar.gz" dest="/home/ec2-user" force="yes" owner="ec2-user" group="ec2-user" mode="0744"
#    - command: "sudo unzip {{ zk_version }}.tar.zip " 
#      when: (zkpath.stat.isdir is not defined or zkpath.stat.isdir != true) 
    - command: "sudo tar xf {{ zk_version }}.tar.gz " 
      when: (zkpath.stat.isdir is not defined or zkpath.stat.isdir != true) 
    - command: "sudo mkdir -p /opt/zkoverlay"
      when: (zkpath.stat.isdir is not defined or zkpath.stat.isdir != true)       
    - command: "sudo mv {{ zk_version }} /opt/zkoverlay"
      when: (zkpath.stat.isdir is not defined or zkpath.stat.isdir != true) 
    - command: "sudo mkdir -p {{ dataVolName }}/zkoverlay/data {{ dataVolName }}/zkoverlay/logdata" 
      when: (zkpath.stat.isdir is not defined or zkpath.stat.isdir != true) 
    - copy: src="./zoo_master_overlay.cfg" dest="/opt/zkoverlay/{{ zk_version }}/conf/zoo.cfg" force="yes" owner="ec2-user" group="ec2-user" mode="0644" 
      when: (zkpath.stat.isdir is not defined or zkpath.stat.isdir != true) 
      sudo: yes 
    - copy: src="./myid" dest="{{ dataVolName }}/zkoverlay/data" force="yes" owner="ec2-user" group="ec2-user" mode="0644" 
      when: (zkpath.stat.isdir is not defined or zkpath.stat.isdir != true) 
      sudo: yes 
    - lineinfile: dest={{ dataVolName }}/zkoverlay/data/myid state=present line="{{zkmyid.stdout}}" 
      sudo: yes 
    - lineinfile: dest=/home/ec2-user/.bash_profile line='export SERVER_JVMFLAGS=-Dzookeeper.DigestAuthenticationProvider.superDigest=super:qYTQk6FODxaN7uX/1kXW0oZqY=' state=present
      sudo: yes
#    - lineinfile: dest=/etc/hosts regexp='zk{{hostvars[item]['ec2_tag_ring_position']}}.{{cluster}}.squigglee' state=absent
#      with_items: groups['tag_cluster_{{cluster}}']
#      sudo: yes 
#    - lineinfile: dest=/etc/hosts line='{{ hostvars[item]['ec2_private_ip_address'] }} zk{{hostvars[item]['ec2_tag_ring_position']}}.{{cluster}}.squigglee zk{{hostvars[item]['ec2_tag_ring_position']}}' state=present
#      when: ( "{{hostvars[item]["ec2_region"]}}" == "{{ hostvars[inventory_hostname]['ec2_region'] }}" )
#      with_items: groups['tag_cluster_{{cluster}}']
#      sudo: yes 
#    - lineinfile: dest=/etc/hosts line='{{ hostvars[item]['ec2_ip_address'] }} zk{{hostvars[item]['ec2_tag_ring_position']}}.{{cluster}}.squigglee zk{{hostvars[item]['ec2_tag_ring_position']}}' state=present
#      when: ( "{{hostvars[item]["ec2_region"]}}" != "{{ hostvars[inventory_hostname]['ec2_region'] }}" )
#      with_items: groups['tag_cluster_{{cluster}}']
#      sudo: yes 
#    - copy: src="./zoo.cfg.dynamic.overlay{{hostvars[inventory_hostname]['ec2_tag_ring_position']}}" dest="/opt/zkoverlay/{{ zk_version }}/conf/zoo.cfg.dynamic.overlay" force="yes" owner="ec2-user" group="ec2-user" mode="0644" 
#      sudo: yes
